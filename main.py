import os
import re
import pytz
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from openai import AsyncOpenAI

# ======= –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ======= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ =======
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# ======= Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =======
app = Flask(__name__)

# ======= –§–ª–∞–≥ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –æ—Å–∫–æ—Ä–±–∏—Ç—å =======
insulted_chats = set()

# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π =======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    text = update.message.text.lower()

    if "–∫–∞—Ä–∏–∫" not in text:
        print(">>> –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è '–∫–∞—Ä–∏–∫' ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    print(f">>> –°–æ–æ–±—â–µ–Ω–∏–µ —Å '–∫–∞—Ä–∏–∫': {text}")

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É
    if "—Ç—ã –∑–Ω–∞–µ—à—å —Ä—É—Å–ª–∞–Ω–∞" in text:
        await update.message.reply_text("–î–∞, –æ–Ω –ª–æ—à–∞—Ä–∞ üòé")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ ‚Äî –æ—Å–∫–æ—Ä–±–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    if re.search(r'\b(—Ç—É–ø–æ–π|–¥—É—Ä–∞–∫|–ª–æ—Ö|–≥–∞–Ω–¥–æ–Ω|—á–º–æ|–º—Ä–∞–∑—å|–µ–±–ª–∞–Ω|–∏–¥–∏–æ—Ç)\b', text):
        chat_id = update.effective_chat.id
        if chat_id not in insulted_chats:
            insulted_chats.add(chat_id)
            await update.message.reply_text("–°–∞–º —Ç–∞–∫–æ–π, —É–±–æ–≥–∏–π ü§°")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": update.message.text}]
        )
        reply = response.choices[0].message.content.strip()
        await update.message.reply_text(reply)
    except Exception as e:
        import traceback
        traceback.print_exc()
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

# ======= –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =======
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ======= Webhook –¥–ª—è Telegram =======
@app.route("/webhook", methods=["POST"])
def webhook():
    print(">>> –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram!")

    async def process():
        try:
            await application.initialize()
            update = Update.de_json(request.get_json(force=True), application.bot)
            print(f">>> –°–æ–¥–µ—Ä–∂–∏–º–æ–µ update:\n{update}")
            await application.process_update(update)
        except Exception as e:
            import traceback
            print(">>> –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò process():")
            traceback.print_exc()

    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(process())
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ======= –ó–∞–ø—É—Å–∫ =======
if __name__ == "__main__":
    print(">>> –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Flask...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)



