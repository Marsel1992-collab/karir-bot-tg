import os
import re
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from openai import AsyncOpenAI

# ==== –ö–ª—é—á–∏ ====
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ==== Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ====
app = Flask(__name__)

# ==== Telegram bot ====
application = Application.builder().token(TELEGRAM_TOKEN).build()

# ==== –ü–∞–º—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ====
user_histories = {}  # user_id: [ {role: ..., content: ...}, ... ]
MAX_HISTORY_LENGTH = 10

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è ====
def contains_swear(text):
    return bool(re.search(r'\b(–µ–±|–±–ª—è|–ø–∏–∑–¥|—Ö—É–π|—Å—É–∫–∞|–Ω–∞—Ö|–≥–∞–Ω–¥–æ–Ω|–º—É–¥–∞–∫|—á–º–æ|–º—Ä–∞–∑—å)\b', text.lower()))

def contains_insult(text):
    return bool(re.search(r'\b(—Ç—É–ø–æ–π|–¥–µ–±–∏–ª|–ª–æ—Ö|–≥–æ–Ω–¥–æ–Ω|–∏–¥–∏–æ—Ç|–∫–æ–∑—ë–ª)\b', text.lower()))

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    text = update.message.text.lower()

    if "–∫–∞—Ä–∏–∫" not in text:
        print(">>> –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ '–∫–∞—Ä–∏–∫' ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    if "—Ç—ã –∑–Ω–∞–µ—à—å —Ä—É—Å–ª–∞–Ω–∞" in text:
        print(">>> –°–ø–µ—Ü–≤–æ–ø—Ä–æ—Å –ø—Ä–æ –†—É—Å–ª–∞–Ω–∞.")
        await update.message.reply_text("–î–∞, –æ–Ω –ª–æ—à–∞—Ä–∞ üòé")
        return

    if contains_insult(text):
        await update.message.reply_text("–°–∞–º —Ç—ã {}, —É—Ä–æ–¥ üò§".format(text.split()[0]))
        return

    if contains_swear(text):
        await update.message.reply_text("–í–æ—Ç –∏ –∏–¥–∏ —Ç—ã –Ω–∞ —Ö*–π! ü§¨")
        return

    user_id = update.message.from_user.id
    user_message = update.message.text
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–∫–∞—Ä–∏–∫': {user_message}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if user_id not in user_histories:
        user_histories[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_histories[user_id].append({"role": "user", "content": user_message})

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
    if len(user_histories[user_id]) > MAX_HISTORY_LENGTH:
        user_histories[user_id] = user_histories[user_id][-MAX_HISTORY_LENGTH:]

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4-turbo",
            messages=user_histories[user_id]
        )
        reply = response.choices[0].message.content.strip()
        print(f"GPT –æ—Ç–≤–µ—Ç–∏–ª: {reply}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_histories[user_id].append({"role": "assistant", "content": reply})
        if len(user_histories[user_id]) > MAX_HISTORY_LENGTH:
            user_histories[user_id] = user_histories[user_id][-MAX_HISTORY_LENGTH:]

        await update.message.reply_text(reply)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# ==== –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ==== Webhook –¥–ª—è Telegram ====
@app.route("/webhook", methods=["POST"])
def webhook():
    print(">>> –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram!")

    async def process():
        try:
            if not application._initialized:
                await application.initialize()
            update = Update.de_json(request.get_json(force=True), application.bot)
            print(f">>> –°–æ–¥–µ—Ä–∂–∏–º–æ–µ update:\n{update}")
            await application.process_update(update)
        except Exception as e:
            import traceback
            print(">>> –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò process():")
            traceback.print_exc()

    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(process())
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ==== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====
if __name__ == "__main__":
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)



