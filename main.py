from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
import asyncio
from openai import OpenAI
import pytz

# ==== –ö–ª—é—á–∏ ====
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ==== Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ====

app = Flask(__name__)

# ==== OpenAI client ====
client = OpenAI(api_key=OPENAI_API_KEY)

# ==== Telegram bot ====
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∑–æ–Ω—ã –≤—Ä—É—á–Ω—É—é
application.job_queue.scheduler.configure(timezone=pytz.UTC)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    text = update.message.text.lower()

    if "–∫–∞—Ä–∏–∫" not in text:
        print(">>> –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ '–∫–∞—Ä–∏–∫' ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    if "—Ç—ã –∑–Ω–∞–µ—à—å —Ä—É—Å–ª–∞–Ω–∞" in text:
        print(">>> –°–ø–µ—Ü–≤–æ–ø—Ä–æ—Å –ø—Ä–æ –†—É—Å–ª–∞–Ω–∞.")
        await update.message.reply_text("–î–∞, –æ–Ω –ª–æ—à–∞—Ä–∞ üòé")
        return

    user_message = update.message.text
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–∫–∞—Ä–∏–∫': {user_message}")

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": user_message}
            ]
        )
        reply = response.choices[0].message.content.strip()
        print(f"GPT –æ—Ç–≤–µ—Ç–∏–ª: {reply}")
        await update.message.reply_text(reply)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# ==== –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ==== Webhook –¥–ª—è Telegram ====
@app.route("/webhook", methods=["POST"])
def webhook():
    print(">>> –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram!")

    async def process():
        try:
            await application.initialize()
            update = Update.de_json(request.get_json(force=True), application.bot)
            print(f">>> –°–æ–¥–µ—Ä–∂–∏–º–æ–µ update:\n{update}")
            await application.process_update(update)
        except Exception as e:
            import traceback
            print(">>> –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò process():")
            traceback.print_exc()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(process())
    return "ok"


@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ==== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====
if __name__ == "__main__":
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run(port=5000)




